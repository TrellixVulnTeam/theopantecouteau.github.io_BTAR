{"ast":null,"code":"import _asyncToGenerator from \"/home/pantecouteaut/Documents/Dev/Angular/eportfolio/eportfolio/theopantecouteau.github.io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport class FrameManager {\n  constructor(container) {\n    this.container = container;\n  }\n\n  nextFrame(timestamp) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      try {\n        const container = _this.container;\n\n        if (container.lastFrameTime !== undefined && timestamp < container.lastFrameTime + 1000 / container.fpsLimit) {\n          container.draw(false);\n          return;\n        }\n\n        (_a = container.lastFrameTime) !== null && _a !== void 0 ? _a : container.lastFrameTime = timestamp;\n        const deltaValue = timestamp - container.lastFrameTime;\n        const delta = {\n          value: deltaValue,\n          factor: 60 * deltaValue / 1000\n        };\n        container.lifeTime += delta.value;\n        container.lastFrameTime = timestamp;\n\n        if (deltaValue > 1000) {\n          container.draw(false);\n          return;\n        }\n\n        yield container.particles.draw(delta);\n\n        if (container.duration > 0 && container.lifeTime > container.duration) {\n          container.destroy();\n          return;\n        }\n\n        if (container.getAnimationStatus()) {\n          container.draw(false);\n        }\n      } catch (e) {\n        console.error(\"tsParticles error in animation loop\", e);\n      }\n    })();\n  }\n\n}","map":{"version":3,"sources":["/home/pantecouteaut/Documents/Dev/Angular/eportfolio/eportfolio/theopantecouteau.github.io/node_modules/tsparticles/esm/Core/Utils/FrameManager.js"],"names":["FrameManager","constructor","container","nextFrame","timestamp","_a","lastFrameTime","undefined","fpsLimit","draw","deltaValue","delta","value","factor","lifeTime","particles","duration","destroy","getAnimationStatus","e","console","error"],"mappings":";AAAA,OAAO,MAAMA,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AACKC,EAAAA,SAAS,CAACC,SAAD,EAAY;AAAA;;AAAA;AACvB,UAAIC,EAAJ;;AACA,UAAI;AACA,cAAMH,SAAS,GAAG,KAAI,CAACA,SAAvB;;AACA,YAAIA,SAAS,CAACI,aAAV,KAA4BC,SAA5B,IACAH,SAAS,GAAGF,SAAS,CAACI,aAAV,GAA0B,OAAOJ,SAAS,CAACM,QAD3D,EACqE;AACjEN,UAAAA,SAAS,CAACO,IAAV,CAAe,KAAf;AACA;AACH;;AACD,SAACJ,EAAE,GAAGH,SAAS,CAACI,aAAhB,MAAmC,IAAnC,IAA2CD,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAiEH,SAAS,CAACI,aAAV,GAA0BF,SAA3F;AACA,cAAMM,UAAU,GAAGN,SAAS,GAAGF,SAAS,CAACI,aAAzC;AACA,cAAMK,KAAK,GAAG;AACVC,UAAAA,KAAK,EAAEF,UADG;AAEVG,UAAAA,MAAM,EAAG,KAAKH,UAAN,GAAoB;AAFlB,SAAd;AAIAR,QAAAA,SAAS,CAACY,QAAV,IAAsBH,KAAK,CAACC,KAA5B;AACAV,QAAAA,SAAS,CAACI,aAAV,GAA0BF,SAA1B;;AACA,YAAIM,UAAU,GAAG,IAAjB,EAAuB;AACnBR,UAAAA,SAAS,CAACO,IAAV,CAAe,KAAf;AACA;AACH;;AACD,cAAMP,SAAS,CAACa,SAAV,CAAoBN,IAApB,CAAyBE,KAAzB,CAAN;;AACA,YAAIT,SAAS,CAACc,QAAV,GAAqB,CAArB,IAA0Bd,SAAS,CAACY,QAAV,GAAqBZ,SAAS,CAACc,QAA7D,EAAuE;AACnEd,UAAAA,SAAS,CAACe,OAAV;AACA;AACH;;AACD,YAAIf,SAAS,CAACgB,kBAAV,EAAJ,EAAoC;AAChChB,UAAAA,SAAS,CAACO,IAAV,CAAe,KAAf;AACH;AACJ,OA3BD,CA4BA,OAAOU,CAAP,EAAU;AACNC,QAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd,EAAqDF,CAArD;AACH;AAhCsB;AAiC1B;;AArCqB","sourcesContent":["export class FrameManager {\n    constructor(container) {\n        this.container = container;\n    }\n    async nextFrame(timestamp) {\n        var _a;\n        try {\n            const container = this.container;\n            if (container.lastFrameTime !== undefined &&\n                timestamp < container.lastFrameTime + 1000 / container.fpsLimit) {\n                container.draw(false);\n                return;\n            }\n            (_a = container.lastFrameTime) !== null && _a !== void 0 ? _a : (container.lastFrameTime = timestamp);\n            const deltaValue = timestamp - container.lastFrameTime;\n            const delta = {\n                value: deltaValue,\n                factor: (60 * deltaValue) / 1000,\n            };\n            container.lifeTime += delta.value;\n            container.lastFrameTime = timestamp;\n            if (deltaValue > 1000) {\n                container.draw(false);\n                return;\n            }\n            await container.particles.draw(delta);\n            if (container.duration > 0 && container.lifeTime > container.duration) {\n                container.destroy();\n                return;\n            }\n            if (container.getAnimationStatus()) {\n                container.draw(false);\n            }\n        }\n        catch (e) {\n            console.error(\"tsParticles error in animation loop\", e);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}