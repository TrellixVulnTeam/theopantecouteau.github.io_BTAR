{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { Subject, from, mergeMap, EMPTY, takeUntil } from 'rxjs';\nimport { tsParticles } from 'tsparticles';\n\nclass NgParticlesComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.particlesLoaded = new EventEmitter();\n    this.destroy$ = new Subject();\n  }\n\n  ngAfterViewInit() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n\n    const cb = container => {\n      this.particlesLoaded.emit(container);\n    };\n\n    from(this.particlesInit ? this.particlesInit(tsParticles) : Promise.resolve()).pipe(mergeMap(() => {\n      if (this.url) {\n        if (this.id) {\n          return tsParticles.loadJSON(this.id, this.url);\n        } else {\n          return tsParticles.loadJSON(this.url);\n        }\n      } else if (this.options) {\n        if (this.id) {\n          return tsParticles.load(this.id, this.options);\n        } else {\n          return tsParticles.load(this.options);\n        }\n      } else {\n        console.error('You must specify options or url to load tsParticles');\n        return EMPTY;\n      }\n    }), takeUntil(this.destroy$)).subscribe(cb);\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n  }\n\n}\n\nNgParticlesComponent.ɵfac = function NgParticlesComponent_Factory(t) {\n  return new (t || NgParticlesComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nNgParticlesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgParticlesComponent,\n  selectors: [[\"ng-particles\"]],\n  inputs: {\n    options: \"options\",\n    url: \"url\",\n    id: \"id\",\n    particlesInit: \"particlesInit\"\n  },\n  outputs: {\n    particlesLoaded: \"particlesLoaded\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"id\"]],\n  template: function NgParticlesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.id);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgParticlesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-particles',\n      template: '<div [id]=\"id\"></div>'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    particlesInit: [{\n      type: Input\n    }],\n    particlesLoaded: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ParticlesComponent extends NgParticlesComponent {\n  constructor() {\n    super(...arguments);\n    this.particlesLoaded = new EventEmitter();\n  }\n\n}\n\nParticlesComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵParticlesComponent_BaseFactory;\n  return function ParticlesComponent_Factory(t) {\n    return (ɵParticlesComponent_BaseFactory || (ɵParticlesComponent_BaseFactory = i0.ɵɵgetInheritedFactory(ParticlesComponent)))(t || ParticlesComponent);\n  };\n}();\n\nParticlesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ParticlesComponent,\n  selectors: [[\"Particles\"]],\n  inputs: {\n    options: \"options\",\n    url: \"url\",\n    id: \"id\",\n    particlesInit: \"particlesInit\"\n  },\n  outputs: {\n    particlesLoaded: \"particlesLoaded\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"id\"]],\n  template: function ParticlesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.id);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ParticlesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'Particles',\n      template: '<div [id]=\"id\"></div>'\n    }]\n  }], null, {\n    options: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    particlesInit: [{\n      type: Input\n    }],\n    particlesLoaded: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NgParticlesModule {}\n\nNgParticlesModule.ɵfac = function NgParticlesModule_Factory(t) {\n  return new (t || NgParticlesModule)();\n};\n\nNgParticlesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgParticlesModule\n});\nNgParticlesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgParticlesModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgParticlesComponent, ParticlesComponent],\n      exports: [NgParticlesComponent, ParticlesComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ng-particles\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgParticlesComponent, NgParticlesModule, ParticlesComponent };","map":{"version":3,"sources":["/home/pantecouteaut/Documents/Dev/Angular/eportfolio/eportfolio/theopantecouteau.github.io/node_modules/ng-particles/fesm2015/ng-particles.mjs"],"names":["i0","EventEmitter","PLATFORM_ID","Component","Inject","Input","Output","NgModule","isPlatformServer","Subject","from","mergeMap","EMPTY","takeUntil","tsParticles","NgParticlesComponent","constructor","platformId","particlesLoaded","destroy$","ngAfterViewInit","cb","container","emit","particlesInit","Promise","resolve","pipe","url","id","loadJSON","options","load","console","error","subscribe","ngOnDestroy","next","ɵfac","ɵcmp","type","args","selector","template","undefined","decorators","ParticlesComponent","arguments","NgParticlesModule","ɵmod","ɵinj","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { Subject, from, mergeMap, EMPTY, takeUntil } from 'rxjs';\nimport { tsParticles } from 'tsparticles';\n\nclass NgParticlesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.particlesLoaded = new EventEmitter();\n        this.destroy$ = new Subject();\n    }\n    ngAfterViewInit() {\n        if (isPlatformServer(this.platformId)) {\n            return;\n        }\n        const cb = (container) => {\n            this.particlesLoaded.emit(container);\n        };\n        from(this.particlesInit ? this.particlesInit(tsParticles) : Promise.resolve())\n            .pipe(mergeMap(() => {\n            if (this.url) {\n                if (this.id) {\n                    return tsParticles.loadJSON(this.id, this.url);\n                }\n                else {\n                    return tsParticles.loadJSON(this.url);\n                }\n            }\n            else if (this.options) {\n                if (this.id) {\n                    return tsParticles.load(this.id, this.options);\n                }\n                else {\n                    return tsParticles.load(this.options);\n                }\n            }\n            else {\n                console.error('You must specify options or url to load tsParticles');\n                return EMPTY;\n            }\n        }), takeUntil(this.destroy$))\n            .subscribe(cb);\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n    }\n}\nNgParticlesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NgParticlesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nNgParticlesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.2\", type: NgParticlesComponent, selector: \"ng-particles\", inputs: { options: \"options\", url: \"url\", id: \"id\", particlesInit: \"particlesInit\" }, outputs: { particlesLoaded: \"particlesLoaded\" }, ngImport: i0, template: '<div [id]=\"id\"></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NgParticlesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng-particles',\n                    template: '<div [id]=\"id\"></div>',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { options: [{\n                type: Input\n            }], url: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], particlesInit: [{\n                type: Input\n            }], particlesLoaded: [{\n                type: Output\n            }] } });\nclass ParticlesComponent extends NgParticlesComponent {\n    constructor() {\n        super(...arguments);\n        this.particlesLoaded = new EventEmitter();\n    }\n}\nParticlesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: ParticlesComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nParticlesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.2\", type: ParticlesComponent, selector: \"Particles\", inputs: { options: \"options\", url: \"url\", id: \"id\", particlesInit: \"particlesInit\" }, outputs: { particlesLoaded: \"particlesLoaded\" }, usesInheritance: true, ngImport: i0, template: '<div [id]=\"id\"></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: ParticlesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'Particles',\n                    template: '<div [id]=\"id\"></div>',\n                }]\n        }], propDecorators: { options: [{\n                type: Input\n            }], url: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], particlesInit: [{\n                type: Input\n            }], particlesLoaded: [{\n                type: Output\n            }] } });\n\nclass NgParticlesModule {\n}\nNgParticlesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NgParticlesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgParticlesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NgParticlesModule, declarations: [NgParticlesComponent, ParticlesComponent], exports: [NgParticlesComponent, ParticlesComponent] });\nNgParticlesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NgParticlesModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NgParticlesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgParticlesComponent, ParticlesComponent],\n                    exports: [NgParticlesComponent, ParticlesComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of ng-particles\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgParticlesComponent, NgParticlesModule, ParticlesComponent };\n"]},"metadata":{},"sourceType":"module"}