import { Component, EventEmitter, Inject, Input, Output, PLATFORM_ID, } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { EMPTY, from, mergeMap, Subject, takeUntil } from 'rxjs';
import { tsParticles } from 'tsparticles';
import * as i0 from "@angular/core";
export class NgParticlesComponent {
    constructor(platformId) {
        this.platformId = platformId;
        this.particlesLoaded = new EventEmitter();
        this.destroy$ = new Subject();
    }
    ngAfterViewInit() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        const cb = (container) => {
            this.particlesLoaded.emit(container);
        };
        from(this.particlesInit ? this.particlesInit(tsParticles) : Promise.resolve())
            .pipe(mergeMap(() => {
            if (this.url) {
                if (this.id) {
                    return tsParticles.loadJSON(this.id, this.url);
                }
                else {
                    return tsParticles.loadJSON(this.url);
                }
            }
            else if (this.options) {
                if (this.id) {
                    return tsParticles.load(this.id, this.options);
                }
                else {
                    return tsParticles.load(this.options);
                }
            }
            else {
                console.error('You must specify options or url to load tsParticles');
                return EMPTY;
            }
        }), takeUntil(this.destroy$))
            .subscribe(cb);
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
NgParticlesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: NgParticlesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
NgParticlesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.2", type: NgParticlesComponent, selector: "ng-particles", inputs: { options: "options", url: "url", id: "id", particlesInit: "particlesInit" }, outputs: { particlesLoaded: "particlesLoaded" }, ngImport: i0, template: '<div [id]="id"></div>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: NgParticlesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ng-particles',
                    template: '<div [id]="id"></div>',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { options: [{
                type: Input
            }], url: [{
                type: Input
            }], id: [{
                type: Input
            }], particlesInit: [{
                type: Input
            }], particlesLoaded: [{
                type: Output
            }] } });
export class ParticlesComponent extends NgParticlesComponent {
    constructor() {
        super(...arguments);
        this.particlesLoaded = new EventEmitter();
    }
}
ParticlesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ParticlesComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
ParticlesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.2", type: ParticlesComponent, selector: "Particles", inputs: { options: "options", url: "url", id: "id", particlesInit: "particlesInit" }, outputs: { particlesLoaded: "particlesLoaded" }, usesInheritance: true, ngImport: i0, template: '<div [id]="id"></div>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ParticlesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'Particles',
                    template: '<div [id]="id"></div>',
                }]
        }], propDecorators: { options: [{
                type: Input
            }], url: [{
                type: Input
            }], id: [{
                type: Input
            }], particlesInit: [{
                type: Input
            }], particlesLoaded: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcGFydGljbGVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXBhcnRpY2xlcy9zcmMvbGliL25nLXBhcnRpY2xlcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFFTCxNQUFNLEVBQ04sV0FBVyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWpFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7O0FBUzFDLE1BQU0sT0FBTyxvQkFBb0I7SUFVL0IsWUFBeUMsVUFBa0I7UUFBbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUxqRCxvQkFBZSxHQUN2QixJQUFJLFlBQVksRUFBYSxDQUFDO1FBRXhCLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBRXVCLENBQUM7SUFFeEQsZUFBZTtRQUNwQixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxPQUFPO1NBQ1I7UUFFRCxNQUFNLEVBQUUsR0FBRyxDQUFDLFNBQXFCLEVBQUUsRUFBRTtZQUNuQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUM7UUFFRixJQUFJLENBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUN6RTthQUNFLElBQUksQ0FDSCxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ1osSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNaLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRTtvQkFDWCxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2hEO3FCQUFNO29CQUNMLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3ZDO2FBQ0Y7aUJBQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUN2QixJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7b0JBQ1gsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNoRDtxQkFBTTtvQkFDTCxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUN2QzthQUNGO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxLQUFLLENBQ1gscURBQXFELENBQ3RELENBQUM7Z0JBQ0YsT0FBTyxLQUFLLENBQUM7YUFDZDtRQUNILENBQUMsQ0FBQyxFQUNGLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQ3pCO2FBQ0EsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFTSxXQUFXO1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7aUhBcERVLG9CQUFvQixrQkFVWCxXQUFXO3FHQVZwQixvQkFBb0IsMkxBRnJCLHVCQUF1QjsyRkFFdEIsb0JBQW9CO2tCQUpoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO29CQUN4QixRQUFRLEVBQUUsdUJBQXVCO2lCQUNsQzs7MEJBV2MsTUFBTTsyQkFBQyxXQUFXOzRDQVR0QixPQUFPO3NCQUFmLEtBQUs7Z0JBQ0csR0FBRztzQkFBWCxLQUFLO2dCQUNHLEVBQUU7c0JBQVYsS0FBSztnQkFDRyxhQUFhO3NCQUFyQixLQUFLO2dCQUNJLGVBQWU7c0JBQXhCLE1BQU07O0FBc0RULE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxvQkFBb0I7SUFKNUQ7O1FBU3FCLG9CQUFlLEdBQ2hDLElBQUksWUFBWSxFQUFhLENBQUM7S0FDakM7OytHQVBZLGtCQUFrQjttR0FBbEIsa0JBQWtCLCtNQUZuQix1QkFBdUI7MkZBRXRCLGtCQUFrQjtrQkFKOUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsV0FBVztvQkFDckIsUUFBUSxFQUFFLHVCQUF1QjtpQkFDbEM7OEJBRW1CLE9BQU87c0JBQXhCLEtBQUs7Z0JBQ1ksR0FBRztzQkFBcEIsS0FBSztnQkFDWSxFQUFFO3NCQUFuQixLQUFLO2dCQUNZLGFBQWE7c0JBQTlCLEtBQUs7Z0JBQ2EsZUFBZTtzQkFBakMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgUExBVEZPUk1fSUQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBFTVBUWSwgZnJvbSwgbWVyZ2VNYXAsIFN1YmplY3QsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyB0c1BhcnRpY2xlcyB9IGZyb20gJ3RzcGFydGljbGVzJztcbmltcG9ydCB0eXBlIHsgQ29udGFpbmVyLCBFbmdpbmUgfSBmcm9tICd0c3BhcnRpY2xlcyc7XG5cbmltcG9ydCB7IElQYXJ0aWNsZXNQcm9wcyB9IGZyb20gJy4vbmctcGFydGljbGVzLm1vZHVsZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nLXBhcnRpY2xlcycsXG4gIHRlbXBsYXRlOiAnPGRpdiBbaWRdPVwiaWRcIj48L2Rpdj4nLFxufSlcbmV4cG9ydCBjbGFzcyBOZ1BhcnRpY2xlc0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIG9wdGlvbnM/OiBJUGFydGljbGVzUHJvcHM7XG4gIEBJbnB1dCgpIHVybD86IHN0cmluZztcbiAgQElucHV0KCkgaWQ/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBhcnRpY2xlc0luaXQ/OiAoZW5naW5lOiBFbmdpbmUpID0+IFByb21pc2U8dm9pZD47XG4gIEBPdXRwdXQoKSBwYXJ0aWNsZXNMb2FkZWQ6IEV2ZW50RW1pdHRlcjxDb250YWluZXI+ID1cbiAgICBuZXcgRXZlbnRFbWl0dGVyPENvbnRhaW5lcj4oKTtcblxuICBwcml2YXRlIGRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IHN0cmluZykge31cblxuICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjYiA9IChjb250YWluZXI/OiBDb250YWluZXIpID0+IHtcbiAgICAgIHRoaXMucGFydGljbGVzTG9hZGVkLmVtaXQoY29udGFpbmVyKTtcbiAgICB9O1xuXG4gICAgZnJvbShcbiAgICAgIHRoaXMucGFydGljbGVzSW5pdCA/IHRoaXMucGFydGljbGVzSW5pdCh0c1BhcnRpY2xlcykgOiBQcm9taXNlLnJlc29sdmUoKVxuICAgIClcbiAgICAgIC5waXBlKFxuICAgICAgICBtZXJnZU1hcCgoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMudXJsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pZCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHNQYXJ0aWNsZXMubG9hZEpTT04odGhpcy5pZCwgdGhpcy51cmwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRzUGFydGljbGVzLmxvYWRKU09OKHRoaXMudXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRzUGFydGljbGVzLmxvYWQodGhpcy5pZCwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiB0c1BhcnRpY2xlcy5sb2FkKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICdZb3UgbXVzdCBzcGVjaWZ5IG9wdGlvbnMgb3IgdXJsIHRvIGxvYWQgdHNQYXJ0aWNsZXMnXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZShjYik7XG4gIH1cblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnUGFydGljbGVzJyxcbiAgdGVtcGxhdGU6ICc8ZGl2IFtpZF09XCJpZFwiPjwvZGl2PicsXG59KVxuZXhwb3J0IGNsYXNzIFBhcnRpY2xlc0NvbXBvbmVudCBleHRlbmRzIE5nUGFydGljbGVzQ29tcG9uZW50IHtcbiAgQElucHV0KCkgb3ZlcnJpZGUgb3B0aW9ucz86IElQYXJ0aWNsZXNQcm9wcztcbiAgQElucHV0KCkgb3ZlcnJpZGUgdXJsPzogc3RyaW5nO1xuICBASW5wdXQoKSBvdmVycmlkZSBpZD86IHN0cmluZztcbiAgQElucHV0KCkgb3ZlcnJpZGUgcGFydGljbGVzSW5pdD86IChlbmdpbmU6IEVuZ2luZSkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgQE91dHB1dCgpIG92ZXJyaWRlIHBhcnRpY2xlc0xvYWRlZDogRXZlbnRFbWl0dGVyPENvbnRhaW5lcj4gPVxuICAgIG5ldyBFdmVudEVtaXR0ZXI8Q29udGFpbmVyPigpO1xufVxuIl19